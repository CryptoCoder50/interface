{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Workflows = void 0;\n\nvar core_1 = require(\"../core\");\n\nvar Workflows = /*#__PURE__*/function (_core_1$CrowdinApi) {\n  _inherits(Workflows, _core_1$CrowdinApi);\n\n  var _super = _createSuper(Workflows);\n\n  function Workflows() {\n    _classCallCheck(this, Workflows);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Workflows, [{\n    key: \"listWorkflowTemplates\",\n    value: function listWorkflowTemplates(groupIdOrRequest, limit, offset) {\n      var url = \"\".concat(this.url, \"/workflow-templates\");\n      var request;\n\n      if (groupIdOrRequest && typeof groupIdOrRequest === 'object') {\n        request = groupIdOrRequest;\n      } else {\n        request = {\n          groupId: groupIdOrRequest,\n          limit: limit,\n          offset: offset\n        };\n      }\n\n      url = this.addQueryParam(url, 'groupId', request.groupId);\n      return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param templateId workflow template identifier\n     */\n\n  }, {\n    key: \"getWorkflowTemplateInfo\",\n    value: function getWorkflowTemplateInfo(templateId) {\n      var url = \"\".concat(this.url, \"/workflow-templates/\").concat(templateId);\n      return this.get(url, this.defaultConfig());\n    }\n  }]);\n\n  return Workflows;\n}(core_1.CrowdinApi);\n\nexports.Workflows = Workflows;","map":{"version":3,"sources":["/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@crowdin/crowdin-api-client/out/workflows/index.js"],"names":["Object","defineProperty","exports","value","Workflows","core_1","require","groupIdOrRequest","limit","offset","url","request","groupId","addQueryParam","getList","templateId","get","defaultConfig","CrowdinApi"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;IACMF,S;;;;;;;;;;;;;WACF,+BAAsBG,gBAAtB,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuD;AACnD,UAAIC,GAAG,aAAM,KAAKA,GAAX,wBAAP;AACA,UAAIC,OAAJ;;AACA,UAAIJ,gBAAgB,IAAI,OAAOA,gBAAP,KAA4B,QAApD,EAA8D;AAC1DI,QAAAA,OAAO,GAAGJ,gBAAV;AACH,OAFD,MAGK;AACDI,QAAAA,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAEL,gBAAX;AAA6BC,UAAAA,KAAK,EAALA,KAA7B;AAAoCC,UAAAA,MAAM,EAANA;AAApC,SAAV;AACH;;AACDC,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,SAAxB,EAAmCC,OAAO,CAACC,OAA3C,CAAN;AACA,aAAO,KAAKE,OAAL,CAAaJ,GAAb,EAAkBC,OAAO,CAACH,KAA1B,EAAiCG,OAAO,CAACF,MAAzC,CAAP;AACH;AACD;AACJ;AACA;;;;WACI,iCAAwBM,UAAxB,EAAoC;AAChC,UAAML,GAAG,aAAM,KAAKA,GAAX,iCAAqCK,UAArC,CAAT;AACA,aAAO,KAAKC,GAAL,CAASN,GAAT,EAAc,KAAKO,aAAL,EAAd,CAAP;AACH;;;;EAnBmBZ,MAAM,CAACa,U;;AAqB/BhB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Workflows = void 0;\nconst core_1 = require(\"../core\");\nclass Workflows extends core_1.CrowdinApi {\n    listWorkflowTemplates(groupIdOrRequest, limit, offset) {\n        let url = `${this.url}/workflow-templates`;\n        let request;\n        if (groupIdOrRequest && typeof groupIdOrRequest === 'object') {\n            request = groupIdOrRequest;\n        }\n        else {\n            request = { groupId: groupIdOrRequest, limit, offset };\n        }\n        url = this.addQueryParam(url, 'groupId', request.groupId);\n        return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param templateId workflow template identifier\n     */\n    getWorkflowTemplateInfo(templateId) {\n        const url = `${this.url}/workflow-templates/${templateId}`;\n        return this.get(url, this.defaultConfig());\n    }\n}\nexports.Workflows = Workflows;\n"]},"metadata":{},"sourceType":"script"}