{"ast":null,"code":"import _asyncToGenerator from\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/regenerator/index.js\";import{useCallback}from'react';import{useWeb3React,UnsupportedChainIdError}from'@web3-react/core';// import { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport{NoEthereumProviderError,UserRejectedRequestError as UserRejectedRequestErrorInjected}from'@web3-react/injected-connector';import{UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,WalletConnectConnector}from'@web3-react/walletconnect-connector';import{connectorLocalStorageKey}from'moonwalkerswap-uikit-avalanche';import{connectorsByName}from'../connectors';import useToast from'./useToast';var useAuth=function useAuth(){var _useWeb3React=useWeb3React(),activate=_useWeb3React.activate,deactivate=_useWeb3React.deactivate;var _useToast=useToast(),toastError=_useToast.toastError;var login=useCallback(function(connectorID){var connector=connectorsByName[connectorID];if(connector){activate(connector,/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(error){var walletConnector;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:window.localStorage.removeItem(connectorLocalStorageKey);if(error instanceof UnsupportedChainIdError){toastError('Unsupported Chain Id','Unsupported Chain Id Error. Check your chain Id.');}else if(error instanceof NoEthereumProviderError){toastError('Provider Error','No provider was found');}else if(error instanceof UserRejectedRequestErrorInjected||error instanceof UserRejectedRequestErrorWalletConnect){if(connector instanceof WalletConnectConnector){walletConnector=connector;walletConnector.walletConnectProvider=null;}toastError('Authorization Error','Please authorize to access your account');}else{toastError(error.name,error.message);}case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());}else{toastError(\"Can't find connector\",'The connector config is wrong');}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return{login:login,logout:deactivate};};export default useAuth;","map":{"version":3,"sources":["/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/src/hooks/useAuth.ts"],"names":["useCallback","useWeb3React","UnsupportedChainIdError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","connectorLocalStorageKey","connectorsByName","useToast","useAuth","activate","deactivate","toastError","login","connectorID","connector","error","window","localStorage","removeItem","walletConnector","walletConnectProvider","name","message","logout"],"mappings":"2UAAA,OAASA,WAAT,KAA4B,OAA5B,CACA,OAASC,YAAT,CAAuBC,uBAAvB,KAAsD,kBAAtD,CACA;AACA,OACEC,uBADF,CAEEC,wBAAwB,GAAIC,CAAAA,gCAF9B,KAGO,gCAHP,CAIA,OACED,wBAAwB,GAAIE,CAAAA,qCAD9B,CAEEC,sBAFF,KAGO,qCAHP,CAIA,OAASC,wBAAT,KAAyD,gCAAzD,CACA,OAASC,gBAAT,KAAiC,eAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,kBAAiCV,YAAY,EAA7C,CAAQW,QAAR,eAAQA,QAAR,CAAkBC,UAAlB,eAAkBA,UAAlB,CACA,cAAuBH,QAAQ,EAA/B,CAAQI,UAAR,WAAQA,UAAR,CAEA,GAAMC,CAAAA,KAAK,CAAGf,WAAW,CAAC,SAACgB,WAAD,CAAiC,CACzD,GAAMC,CAAAA,SAAS,CAAGR,gBAAgB,CAACO,WAAD,CAAlC,CACA,GAAIC,SAAJ,CAAe,CACbL,QAAQ,CAACK,SAAD,0FAAY,iBAAOC,KAAP,sIAClBC,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+Bb,wBAA/B,EACA,GAAIU,KAAK,WAAYhB,CAAAA,uBAArB,CAA8C,CAC5CY,UAAU,CAAC,sBAAD,CAAyB,kDAAzB,CAAV,CACD,CAFD,IAEO,IAAII,KAAK,WAAYf,CAAAA,uBAArB,CAA8C,CACnDW,UAAU,CAAC,gBAAD,CAAmB,uBAAnB,CAAV,CACD,CAFM,IAEA,IACLI,KAAK,WAAYb,CAAAA,gCAAjB,EACAa,KAAK,WAAYZ,CAAAA,qCAFZ,CAGL,CACA,GAAIW,SAAS,WAAYV,CAAAA,sBAAzB,CAAiD,CACzCe,eADyC,CACvBL,SADuB,CAE/CK,eAAe,CAACC,qBAAhB,CAAwC,IAAxC,CACD,CACDT,UAAU,CAAC,qBAAD,CAAwB,yCAAxB,CAAV,CACD,CATM,IASA,CACLA,UAAU,CAACI,KAAK,CAACM,IAAP,CAAaN,KAAK,CAACO,OAAnB,CAAV,CACD,CAjBiB,sDAAZ,+DAAR,CAmBD,CApBD,IAoBO,CACLX,UAAU,CAAC,sBAAD,CAAyB,+BAAzB,CAAV,CACD,CACD;AACD,CA1BwB,CA0BtB,EA1BsB,CAAzB,CA4BA,MAAO,CAAEC,KAAK,CAALA,KAAF,CAASW,MAAM,CAAEb,UAAjB,CAAP,CACD,CAjCD,CAmCA,cAAeF,CAAAA,OAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\n// import { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { connectorLocalStorageKey, ConnectorNames } from 'moonwalkerswap-uikit-avalanche'\nimport { connectorsByName } from '../connectors'\nimport useToast from './useToast'\n\nconst useAuth = () => {\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback((connectorID: ConnectorNames) => {\n    const connector = connectorsByName[connectorID]\n    if (connector) {\n      activate(connector, async (error: Error) => {\n        window.localStorage.removeItem(connectorLocalStorageKey)\n        if (error instanceof UnsupportedChainIdError) {\n          toastError('Unsupported Chain Id', 'Unsupported Chain Id Error. Check your chain Id.')\n        } else if (error instanceof NoEthereumProviderError) {\n          toastError('Provider Error', 'No provider was found')\n        } else if (\n          error instanceof UserRejectedRequestErrorInjected ||\n          error instanceof UserRejectedRequestErrorWalletConnect\n        ) {\n          if (connector instanceof WalletConnectConnector) {\n            const walletConnector = connector as WalletConnectConnector\n            walletConnector.walletConnectProvider = null\n          }\n          toastError('Authorization Error', 'Please authorize to access your account')\n        } else {\n          toastError(error.name, error.message)\n        }\n      })\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return { login, logout: deactivate }\n}\n\nexport default useAuth\n"]},"metadata":{},"sourceType":"module"}