{"ast":null,"code":"\"use strict\";\n\nvar e;\n\nfunction t(e, t) {\n  return e.major < t.major ? -1 : e.major > t.major ? 1 : e.minor < t.minor ? -1 : e.minor > t.minor ? 1 : e.patch < t.patch ? -1 : e.patch > t.patch ? 1 : 0;\n}\n\nfunction i(e, t) {\n  var i = e.reduce(function (e, t) {\n    return e[t.chainId] || (e[t.chainId] = {}), e[t.chainId][t.address] = t, e;\n  }, {}),\n      n = t.reduce(function (e, t) {\n    var n,\n        r,\n        o = null == (n = i[t.chainId]) ? void 0 : n[t.address];\n\n    if (o) {\n      var s = Object.keys(t).filter(function (e) {\n        return \"address\" !== e && \"chainId\" !== e;\n      }).filter(function (e) {\n        return !((i = t[e]) === (n = o[e]) || typeof i == typeof n && Array.isArray(i) && Array.isArray(n) && i.every(function (e, t) {\n          return n[t] === e;\n        }));\n        var i, n;\n      });\n      s.length > 0 && (e.changed[t.chainId] || (e.changed[t.chainId] = {}), e.changed[t.chainId][t.address] = s);\n    } else e.added.push(t);\n\n    return e.index[t.chainId] ? e.index[t.chainId][t.address] = !0 : e.index[t.chainId] = ((r = {})[t.address] = !0, r), e;\n  }, {\n    added: [],\n    changed: {},\n    index: {}\n  }),\n      r = e.reduce(function (e, t) {\n    return n.index[t.chainId] && n.index[t.chainId][t.address] || e.push(t), e;\n  }, []);\n  return {\n    added: n.added,\n    changed: n.changed,\n    removed: r\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), (e = exports.VersionUpgrade || (exports.VersionUpgrade = {}))[e.NONE = 0] = \"NONE\", e[e.PATCH = 1] = \"PATCH\", e[e.MINOR = 2] = \"MINOR\", e[e.MAJOR = 3] = \"MAJOR\", exports.diffTokenLists = i, exports.getVersionUpgrade = function (e, t) {\n  return t.major > e.major ? exports.VersionUpgrade.MAJOR : t.major < e.major ? exports.VersionUpgrade.NONE : t.minor > e.minor ? exports.VersionUpgrade.MINOR : t.minor < e.minor ? exports.VersionUpgrade.NONE : t.patch > e.patch ? exports.VersionUpgrade.PATCH : exports.VersionUpgrade.NONE;\n}, exports.isVersionUpdate = function (e, i) {\n  return t(e, i) < 0;\n}, exports.minVersionBump = function (e, t) {\n  var n = i(e, t);\n  return n.removed.length > 0 ? exports.VersionUpgrade.MAJOR : n.added.length > 0 ? exports.VersionUpgrade.MINOR : Object.keys(n.changed).length > 0 ? exports.VersionUpgrade.PATCH : exports.VersionUpgrade.NONE;\n}, exports.nextVersion = function (e, t) {\n  switch (t) {\n    case exports.VersionUpgrade.NONE:\n      return e;\n\n    case exports.VersionUpgrade.MAJOR:\n      return {\n        major: e.major + 1,\n        minor: 0,\n        patch: 0\n      };\n\n    case exports.VersionUpgrade.MINOR:\n      return {\n        major: e.major,\n        minor: e.minor + 1,\n        patch: 0\n      };\n\n    case exports.VersionUpgrade.PATCH:\n      return {\n        major: e.major,\n        minor: e.minor,\n        patch: e.patch + 1\n      };\n  }\n}, exports.schema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"https://moonwalker.network/tokenlist.schema.json\",\n  title: \"Moonwalkerwap Token List\",\n  description: \"Schema for lists of tokens compatible with the Moonwalkerswap Interface\",\n  definitions: {\n    Version: {\n      type: \"object\",\n      description: \"The version of the list, used in change detection\",\n      examples: [{\n        major: 1,\n        minor: 0,\n        patch: 0\n      }],\n      additionalProperties: !1,\n      properties: {\n        major: {\n          type: \"integer\",\n          description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n          minimum: 0,\n          examples: [1, 2]\n        },\n        minor: {\n          type: \"integer\",\n          description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        },\n        patch: {\n          type: \"integer\",\n          description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        }\n      },\n      required: [\"major\", \"minor\", \"patch\"]\n    },\n    TagIdentifier: {\n      type: \"string\",\n      description: \"The unique identifier of a tag\",\n      minLength: 1,\n      maxLength: 10,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"avalanche\", \"stablecoin\"]\n    },\n    ExtensionIdentifier: {\n      type: \"string\",\n      description: \"The name of a token extension property\",\n      minLength: 1,\n      maxLength: 40,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"color\", \"is_fee_on_transfer\", \"aliases\"]\n    },\n    ExtensionMap: {\n      type: \"object\",\n      description: \"An object containing any arbitrary or vendor-specific token metadata\",\n      maxProperties: 10,\n      propertyNames: {\n        $ref: \"#/definitions/ExtensionIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/ExtensionValue\"\n      },\n      examples: [{\n        color: \"#000000\",\n        is_verified_by_me: !0\n      }, {\n        \"x-bridged-addresses-by-chain\": {\n          1: {\n            bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n            tokenAddress: \"0x4200000000000000000000000000000000000010\"\n          }\n        }\n      }]\n    },\n    ExtensionPrimitiveValue: {\n      anyOf: [{\n        type: \"string\",\n        minLength: 1,\n        maxLength: 42,\n        examples: [\"#00000\"]\n      }, {\n        type: \"boolean\",\n        examples: [!0]\n      }, {\n        type: \"number\",\n        examples: [15]\n      }, {\n        type: \"null\"\n      }]\n    },\n    ExtensionValue: {\n      anyOf: [{\n        $ref: \"#/definitions/ExtensionPrimitiveValue\"\n      }, {\n        type: \"object\",\n        maxProperties: 10,\n        propertyNames: {\n          $ref: \"#/definitions/ExtensionIdentifier\"\n        },\n        additionalProperties: {\n          $ref: \"#/definitions/ExtensionValueInner0\"\n        }\n      }]\n    },\n    ExtensionValueInner0: {\n      anyOf: [{\n        $ref: \"#/definitions/ExtensionPrimitiveValue\"\n      }, {\n        type: \"object\",\n        maxProperties: 10,\n        propertyNames: {\n          $ref: \"#/definitions/ExtensionIdentifier\"\n        },\n        additionalProperties: {\n          $ref: \"#/definitions/ExtensionValueInner1\"\n        }\n      }]\n    },\n    ExtensionValueInner1: {\n      anyOf: [{\n        $ref: \"#/definitions/ExtensionPrimitiveValue\"\n      }]\n    },\n    TagDefinition: {\n      type: \"object\",\n      description: \"Definition of a tag that can be associated with a token via its identifier\",\n      additionalProperties: !1,\n      properties: {\n        name: {\n          type: \"string\",\n          description: \"The name of the tag\",\n          pattern: \"^[ \\\\w]+$\",\n          minLength: 1,\n          maxLength: 20\n        },\n        description: {\n          type: \"string\",\n          description: \"A user-friendly description of the tag\",\n          pattern: \"^[ \\\\w\\\\.,:]+$\",\n          minLength: 1,\n          maxLength: 200\n        }\n      },\n      required: [\"name\", \"description\"],\n      examples: [{\n        name: \"Stablecoin\",\n        description: \"A token with value pegged to another asset\"\n      }]\n    },\n    TokenInfo: {\n      type: \"object\",\n      description: \"Metadata for a single token in a token list\",\n      additionalProperties: !1,\n      properties: {\n        chainId: {\n          type: \"integer\",\n          description: \"The chain ID of the Ethereum network where this token is deployed\",\n          minimum: 1,\n          examples: [1, 42]\n        },\n        address: {\n          type: \"string\",\n          description: \"The checksummed address of the token on the specified chain ID\",\n          pattern: \"^0x[a-fA-F0-9]{40}$\",\n          examples: [\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n        },\n        decimals: {\n          type: \"integer\",\n          description: \"The number of decimals for the token balance\",\n          minimum: 0,\n          maximum: 255,\n          examples: [18]\n        },\n        name: {\n          type: \"string\",\n          description: \"The name of the token\",\n          minLength: 1,\n          maxLength: 40,\n          pattern: \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\",\n          examples: [\"USD Coin\"]\n        },\n        symbol: {\n          type: \"string\",\n          description: \"The symbol for the token; must be alphanumeric\",\n          pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n          minLength: 1,\n          maxLength: 20,\n          examples: [\"USDC\"]\n        },\n        logoURI: {\n          type: \"string\",\n          description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n          format: \"uri\",\n          examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n        },\n        tags: {\n          type: \"array\",\n          description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n          items: {\n            $ref: \"#/definitions/TagIdentifier\"\n          },\n          maxItems: 10,\n          examples: [\"stablecoin\", \"avalanche\"]\n        },\n        extensions: {\n          $ref: \"#/definitions/ExtensionMap\"\n        }\n      },\n      required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n    }\n  },\n  type: \"object\",\n  additionalProperties: !1,\n  properties: {\n    name: {\n      type: \"string\",\n      description: \"The name of the token list\",\n      minLength: 1,\n      maxLength: 20,\n      pattern: \"^[\\\\w ]+$\",\n      examples: [\"My Token List\"]\n    },\n    timestamp: {\n      type: \"string\",\n      format: \"date-time\",\n      description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n    },\n    version: {\n      $ref: \"#/definitions/Version\"\n    },\n    tokens: {\n      type: \"array\",\n      description: \"The list of tokens included in the list\",\n      items: {\n        $ref: \"#/definitions/TokenInfo\"\n      },\n      minItems: 1,\n      maxItems: 1e4\n    },\n    keywords: {\n      type: \"array\",\n      description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n      items: {\n        type: \"string\",\n        description: \"A keyword to describe the contents of the list\",\n        minLength: 1,\n        maxLength: 20,\n        pattern: \"^[\\\\w ]+$\",\n        examples: [\"compound\", \"lending\", \"personal tokens\"]\n      },\n      maxItems: 20,\n      uniqueItems: !0\n    },\n    tags: {\n      type: \"object\",\n      description: \"A mapping of tag identifiers to their name and description\",\n      propertyNames: {\n        $ref: \"#/definitions/TagIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/TagDefinition\"\n      },\n      maxProperties: 20,\n      examples: [{\n        stablecoin: {\n          name: \"Stablecoin\",\n          description: \"A token with value pegged to another asset\"\n        }\n      }]\n    },\n    logoURI: {\n      type: \"string\",\n      description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n      format: \"uri\",\n      examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n    }\n  },\n  required: [\"name\", \"timestamp\", \"version\", \"tokens\"]\n}, exports.versionComparator = t;","map":{"version":3,"sources":["../src/getVersionUpgrade.ts","../src/versionComparator.ts","../src/diffTokenLists.ts","../src/isVersionUpdate.ts","../src/minVersionBump.ts","../src/nextVersion.ts"],"names":["VersionUpgrade","base","update","major","MAJOR","NONE","minor","MINOR","patch","PATCH","versionComparator","versionA","versionB","a","b","Array","isArray","every","el","i","diffTokenLists","indexedBase","reduce","memo","tokenInfo","chainId","address","newListUpdates","baseToken","added","push","changes","Object","keys","filter","s","length","changed","index","removed","list","curr","baseList","updatedList","diff","bump"],"mappings":"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","sourcesContent":["/**\n * Enum describing types of version differences\n */\nimport { Version } from './types';\n\nexport enum VersionUpgrade {\n  NONE,\n  PATCH,\n  MINOR,\n  MAJOR,\n}\n\n/**\n * Return the upgrade type from the base version to the update version.\n * Note that downgrades and equivalent versions are both treated as `NONE`.\n * @param base base list\n * @param update update to the list\n */\nexport function getVersionUpgrade(\n  base: Version,\n  update: Version\n): VersionUpgrade {\n  if (update.major > base.major) {\n    return VersionUpgrade.MAJOR;\n  }\n  if (update.major < base.major) {\n    return VersionUpgrade.NONE;\n  }\n  if (update.minor > base.minor) {\n    return VersionUpgrade.MINOR;\n  }\n  if (update.minor < base.minor) {\n    return VersionUpgrade.NONE;\n  }\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\n}\n","import { Version } from './types';\n\n/**\n * Comparator function that allows sorting version from lowest to highest\n * @param versionA version A to compare\n * @param versionB version B to compare\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\n */\nexport function versionComparator(\n  versionA: Version,\n  versionB: Version\n): -1 | 0 | 1 {\n  if (versionA.major < versionB.major) {\n    return -1;\n  } else if (versionA.major > versionB.major) {\n    return 1;\n  } else if (versionA.minor < versionB.minor) {\n    return -1;\n  } else if (versionA.minor > versionB.minor) {\n    return 1;\n  } else if (versionA.patch < versionB.patch) {\n    return -1;\n  } else if (versionA.patch > versionB.patch) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n","import { TokenInfo } from './types';\n\nexport type TokenInfoChangeKey = Exclude<\n  keyof TokenInfo,\n  'address' | 'chainId'\n>;\nexport type TokenInfoChanges = Array<TokenInfoChangeKey>;\n\n/**\n * compares two token info key values\n * this subset of full deep equal functionality does not work on objects or object arrays\n * @param a comparison item a\n * @param b comparison item b\n */\nfunction compareTokenInfoProperty(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n  if (typeof a !== typeof b) return false;\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.every((el, i) => b[i] === el);\n  }\n  return false;\n}\n\n/**\n * Differences between a base list and an updated list.\n */\nexport interface TokenListDiff {\n  /**\n   * Tokens from updated with chainId/address not present in base list\n   */\n  readonly added: TokenInfo[];\n  /**\n   * Tokens from base with chainId/address not present in the updated list\n   */\n  readonly removed: TokenInfo[];\n  /**\n   * The token info that changed\n   */\n  readonly changed: {\n    [chainId: number]: {\n      [address: string]: TokenInfoChanges;\n    };\n  };\n}\n\n/**\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\n * @param base base list\n * @param update updated list\n */\nexport function diffTokenLists(\n  base: TokenInfo[],\n  update: TokenInfo[]\n): TokenListDiff {\n  const indexedBase = base.reduce<{\n    [chainId: number]: { [address: string]: TokenInfo };\n  }>((memo, tokenInfo) => {\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\n    return memo;\n  }, {});\n\n  const newListUpdates = update.reduce<{\n    added: TokenInfo[];\n    changed: {\n      [chainId: number]: {\n        [address: string]: TokenInfoChanges;\n      };\n    };\n    index: {\n      [chainId: number]: {\n        [address: string]: true;\n      };\n    };\n  }>(\n    (memo, tokenInfo) => {\n      const baseToken = indexedBase[tokenInfo.chainId]?.[tokenInfo.address];\n      if (!baseToken) {\n        memo.added.push(tokenInfo);\n      } else {\n        const changes: TokenInfoChanges = Object.keys(tokenInfo)\n          .filter(\n            (s): s is TokenInfoChangeKey => s !== 'address' && s !== 'chainId'\n          )\n          .filter(s => {\n            return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\n          });\n        if (changes.length > 0) {\n          if (!memo.changed[tokenInfo.chainId]) {\n            memo.changed[tokenInfo.chainId] = {};\n          }\n          memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\n        }\n      }\n\n      if (!memo.index[tokenInfo.chainId]) {\n        memo.index[tokenInfo.chainId] = {\n          [tokenInfo.address]: true,\n        };\n      } else {\n        memo.index[tokenInfo.chainId][tokenInfo.address] = true;\n      }\n\n      return memo;\n    },\n    { added: [], changed: {}, index: {} }\n  );\n\n  const removed = base.reduce<TokenInfo[]>((list, curr) => {\n    if (\n      !newListUpdates.index[curr.chainId] ||\n      !newListUpdates.index[curr.chainId][curr.address]\n    ) {\n      list.push(curr);\n    }\n    return list;\n  }, []);\n\n  return {\n    added: newListUpdates.added,\n    changed: newListUpdates.changed,\n    removed,\n  };\n}\n","import { versionComparator } from './versionComparator';\nimport { Version } from './types';\n\n/**\n * Returns true if versionB is an update over versionA\n */\nexport function isVersionUpdate(base: Version, update: Version): boolean {\n  return versionComparator(base, update) < 0;\n}\n","import { diffTokenLists } from './diffTokenLists';\nimport { VersionUpgrade } from './getVersionUpgrade';\nimport { TokenInfo } from './types';\n\n/**\n * Returns the minimum version bump for the given list\n * @param baseList the base list of tokens\n * @param updatedList the updated list of tokens\n */\nexport function minVersionBump(\n  baseList: TokenInfo[],\n  updatedList: TokenInfo[]\n): VersionUpgrade {\n  const diff = diffTokenLists(baseList, updatedList);\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\n  return VersionUpgrade.NONE;\n}\n","import { VersionUpgrade } from './getVersionUpgrade';\nimport { Version } from './types';\n\n/**\n * Returns the next version of the list given a base version and the upgrade type\n * @param base current version\n * @param bump the upgrade type\n */\nexport function nextVersion(base: Version, bump: VersionUpgrade): Version {\n  switch (bump) {\n    case VersionUpgrade.NONE:\n      return base;\n\n    case VersionUpgrade.MAJOR:\n      return { major: base.major + 1, minor: 0, patch: 0 };\n\n    case VersionUpgrade.MINOR:\n      return {\n        major: base.major,\n        minor: base.minor + 1,\n        patch: 0,\n      };\n\n    case VersionUpgrade.PATCH:\n      return {\n        major: base.major,\n        minor: base.minor,\n        patch: base.patch + 1,\n      };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}