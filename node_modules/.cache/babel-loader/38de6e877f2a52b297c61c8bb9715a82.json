{"ast":null,"code":"(function (e, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = e || self, e.JSBI = t());\n})(this, function () {\n  'use strict';\n\n  var e = Math.imul,\n      t = Math.clz32;\n\n  function i(e) {\n    \"@babel/helpers - typeof\";\n\n    return i = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n      return typeof e;\n    } : function (e) {\n      return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n    }, i(e);\n  }\n\n  function _(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function n(e, t) {\n    for (var _, n = 0; n < t.length; n++) {\n      _ = t[n], _.enumerable = _.enumerable || !1, _.configurable = !0, \"value\" in _ && (_.writable = !0), Object.defineProperty(e, _.key, _);\n    }\n  }\n\n  function l(e, t, i) {\n    return t && n(e.prototype, t), i && n(e, i), e;\n  }\n\n  function g(e, t) {\n    if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n    e.prototype = Object.create(t && t.prototype, {\n      constructor: {\n        value: e,\n        writable: !0,\n        configurable: !0\n      }\n    }), t && s(e, t);\n  }\n\n  function a(e) {\n    return a = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n      return e.__proto__ || Object.getPrototypeOf(e);\n    }, a(e);\n  }\n\n  function s(e, t) {\n    return s = Object.setPrototypeOf || function (e, t) {\n      return e.__proto__ = t, e;\n    }, s(e, t);\n  }\n\n  function u() {\n    if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n    if (Reflect.construct.sham) return !1;\n    if (\"function\" == typeof Proxy) return !0;\n\n    try {\n      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n    } catch (t) {\n      return !1;\n    }\n  }\n\n  function r() {\n    return r = u() ? Reflect.construct : function (e, t, i) {\n      var _ = [null];\n\n      _.push.apply(_, t);\n\n      var n = Function.bind.apply(e, _),\n          l = new n();\n      return i && s(l, i.prototype), l;\n    }, r.apply(null, arguments);\n  }\n\n  function d(e) {\n    return -1 !== Function.toString.call(e).indexOf(\"[native code]\");\n  }\n\n  function h(e) {\n    var t = \"function\" == typeof Map ? new Map() : void 0;\n    return h = function h(e) {\n      function i() {\n        return r(e, arguments, a(this).constructor);\n      }\n\n      if (null === e || !d(e)) return e;\n      if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\");\n\n      if (\"undefined\" != typeof t) {\n        if (t.has(e)) return t.get(e);\n        t.set(e, i);\n      }\n\n      return i.prototype = Object.create(e.prototype, {\n        constructor: {\n          value: i,\n          enumerable: !1,\n          writable: !0,\n          configurable: !0\n        }\n      }), s(i, e);\n    }, h(e);\n  }\n\n  function b(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n  }\n\n  function m(e, t) {\n    if (t && (\"object\" == typeof t || \"function\" == typeof t)) return t;\n    if (void 0 !== t) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return b(e);\n  }\n\n  function c(e) {\n    var t = u();\n    return function () {\n      var i,\n          _ = a(e);\n\n      if (t) {\n        var n = a(this).constructor;\n        i = Reflect.construct(_, arguments, n);\n      } else i = _.apply(this, arguments);\n\n      return m(this, i);\n    };\n  }\n\n  function v(e, t) {\n    if (e) {\n      if (\"string\" == typeof e) return f(e, t);\n      var i = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === i && e.constructor && (i = e.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(e) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? f(e, t) : void 0;\n    }\n  }\n\n  function f(e, t) {\n    (null == t || t > e.length) && (t = e.length);\n\n    for (var _ = 0, n = Array(t); _ < t; _++) {\n      n[_] = e[_];\n    }\n\n    return n;\n  }\n\n  function y(e, t) {\n    var _ = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n\n    if (!_) {\n      if (Array.isArray(e) || (_ = v(e)) || t && e && \"number\" == typeof e.length) {\n        _ && (e = _);\n\n        var _n = 0,\n            l = function l() {};\n\n        return {\n          s: l,\n          n: function n() {\n            return _n >= e.length ? {\n              done: !0\n            } : {\n              done: !1,\n              value: e[_n++]\n            };\n          },\n          e: function e(t) {\n            throw t;\n          },\n          f: l\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var g,\n        a = !0,\n        s = !1;\n    return {\n      s: function s() {\n        _ = _.call(e);\n      },\n      n: function n() {\n        var e = _.next();\n\n        return a = e.done, e;\n      },\n      e: function e(t) {\n        s = !0, g = t;\n      },\n      f: function f() {\n        try {\n          a || null == _.return || _.return();\n        } finally {\n          if (s) throw g;\n        }\n      }\n    };\n  }\n\n  var D = function (e) {\n    var t = Math.abs,\n        n = Math.max,\n        o = Math.floor;\n\n    function a(e, t) {\n      var i;\n      if (_(this, a), i = s.call(this, e), i.sign = t, Object.setPrototypeOf(b(i), a.prototype), e > a.__kMaxLength) throw new RangeError(\"Maximum BigInt size exceeded\");\n      return i;\n    }\n\n    g(a, e);\n    var s = c(a);\n    return l(a, [{\n      key: \"toDebugString\",\n      value: function value() {\n        var e,\n            t = [\"BigInt[\"],\n            i = y(this);\n\n        try {\n          for (i.s(); !(e = i.n()).done;) {\n            var _ = e.value;\n            t.push((_ ? (_ >>> 0).toString(16) : _) + \", \");\n          }\n        } catch (e) {\n          i.e(e);\n        } finally {\n          i.f();\n        }\n\n        return t.push(\"]\"), t.join(\"\");\n      }\n    }, {\n      key: \"toString\",\n      value: function value() {\n        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 10;\n        if (2 > e || 36 < e) throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n        return 0 === this.length ? \"0\" : 0 == (e & e - 1) ? a.__toStringBasePowerOfTwo(this, e) : a.__toStringGeneric(this, e, !1);\n      }\n    }, {\n      key: \"valueOf\",\n      value: function value() {\n        throw new Error(\"Convert JSBI instances to native numbers using `toNumber`.\");\n      }\n    }, {\n      key: \"__copy\",\n      value: function value() {\n        for (var e = new a(this.length, this.sign), t = 0; t < this.length; t++) {\n          e[t] = this[t];\n        }\n\n        return e;\n      }\n    }, {\n      key: \"__trim\",\n      value: function value() {\n        for (var e = this.length, t = this[e - 1]; 0 === t;) {\n          e--, t = this[e - 1], this.pop();\n        }\n\n        return 0 === e && (this.sign = !1), this;\n      }\n    }, {\n      key: \"__initializeDigits\",\n      value: function value() {\n        for (var e = 0; e < this.length; e++) {\n          this[e] = 0;\n        }\n      }\n    }, {\n      key: \"__clzmsd\",\n      value: function value() {\n        return a.__clz30(this.__digit(this.length - 1));\n      }\n    }, {\n      key: \"__inplaceMultiplyAdd\",\n      value: function value(e, t, _) {\n        _ > this.length && (_ = this.length);\n\n        for (var n = 32767 & e, l = e >>> 15, g = 0, o = t, s = 0; s < _; s++) {\n          var u = this.__digit(s),\n              r = 32767 & u,\n              d = u >>> 15,\n              h = a.__imul(r, n),\n              b = a.__imul(r, l),\n              m = a.__imul(d, n),\n              c = a.__imul(d, l),\n              v = o + h + g;\n\n          g = v >>> 30, v &= 1073741823, v += ((32767 & b) << 15) + ((32767 & m) << 15), g += v >>> 30, o = c + (b >>> 15) + (m >>> 15), this.__setDigit(s, 1073741823 & v);\n        }\n\n        if (0 !== g || 0 !== o) throw new Error(\"implementation bug\");\n      }\n    }, {\n      key: \"__inplaceAdd\",\n      value: function value(e, t, _) {\n        for (var n, l = 0, g = 0; g < _; g++) {\n          n = this.__halfDigit(t + g) + e.__halfDigit(g) + l, l = n >>> 15, this.__setHalfDigit(t + g, 32767 & n);\n        }\n\n        return l;\n      }\n    }, {\n      key: \"__inplaceSub\",\n      value: function value(e, t, _) {\n        var n = 0;\n\n        if (1 & t) {\n          t >>= 1;\n\n          for (var l = this.__digit(t), g = 32767 & l, o = 0; o < _ - 1 >>> 1; o++) {\n            var a = e.__digit(o),\n                s = (l >>> 15) - (32767 & a) - n;\n\n            n = 1 & s >>> 15, this.__setDigit(t + o, (32767 & s) << 15 | 32767 & g), l = this.__digit(t + o + 1), g = (32767 & l) - (a >>> 15) - n, n = 1 & g >>> 15;\n          }\n\n          var u = e.__digit(o),\n              r = (l >>> 15) - (32767 & u) - n;\n\n          n = 1 & r >>> 15, this.__setDigit(t + o, (32767 & r) << 15 | 32767 & g);\n          if (t + o + 1 >= this.length) throw new RangeError(\"out of bounds\");\n          0 == (1 & _) && (l = this.__digit(t + o + 1), g = (32767 & l) - (u >>> 15) - n, n = 1 & g >>> 15, this.__setDigit(t + e.length, 1073709056 & l | 32767 & g));\n        } else {\n          t >>= 1;\n\n          for (var d = 0; d < e.length - 1; d++) {\n            var h = this.__digit(t + d),\n                b = e.__digit(d),\n                m = (32767 & h) - (32767 & b) - n;\n\n            n = 1 & m >>> 15;\n            var c = (h >>> 15) - (b >>> 15) - n;\n            n = 1 & c >>> 15, this.__setDigit(t + d, (32767 & c) << 15 | 32767 & m);\n          }\n\n          var v = this.__digit(t + d),\n              f = e.__digit(d),\n              y = (32767 & v) - (32767 & f) - n;\n\n          n = 1 & y >>> 15;\n          var D = 0;\n          0 == (1 & _) && (D = (v >>> 15) - (f >>> 15) - n, n = 1 & D >>> 15), this.__setDigit(t + d, (32767 & D) << 15 | 32767 & y);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"__inplaceRightShift\",\n      value: function value(e) {\n        if (0 !== e) {\n          for (var t, _ = this.__digit(0) >>> e, n = this.length - 1, l = 0; l < n; l++) {\n            t = this.__digit(l + 1), this.__setDigit(l, 1073741823 & t << 30 - e | _), _ = t >>> e;\n          }\n\n          this.__setDigit(n, _);\n        }\n      }\n    }, {\n      key: \"__digit\",\n      value: function value(e) {\n        return this[e];\n      }\n    }, {\n      key: \"__unsignedDigit\",\n      value: function value(e) {\n        return this[e] >>> 0;\n      }\n    }, {\n      key: \"__setDigit\",\n      value: function value(e, t) {\n        this[e] = 0 | t;\n      }\n    }, {\n      key: \"__setDigitGrow\",\n      value: function value(e, t) {\n        this[e] = 0 | t;\n      }\n    }, {\n      key: \"__halfDigitLength\",\n      value: function value() {\n        var e = this.length;\n        return 32767 >= this.__unsignedDigit(e - 1) ? 2 * e - 1 : 2 * e;\n      }\n    }, {\n      key: \"__halfDigit\",\n      value: function value(e) {\n        return 32767 & this[e >>> 1] >>> 15 * (1 & e);\n      }\n    }, {\n      key: \"__setHalfDigit\",\n      value: function value(e, t) {\n        var i = e >>> 1,\n            _ = this.__digit(i),\n            n = 1 & e ? 32767 & _ | t << 15 : 1073709056 & _ | 32767 & t;\n\n        this.__setDigit(i, n);\n      }\n    }], [{\n      key: \"BigInt\",\n      value: function value(e) {\n        var t = Number.isFinite;\n\n        if (\"number\" == typeof e) {\n          if (0 === e) return a.__zero();\n          if (a.__isOneDigitInt(e)) return 0 > e ? a.__oneDigit(-e, !0) : a.__oneDigit(e, !1);\n          if (!t(e) || o(e) !== e) throw new RangeError(\"The number \" + e + \" cannot be converted to BigInt because it is not an integer\");\n          return a.__fromDouble(e);\n        }\n\n        if (\"string\" == typeof e) {\n          var _ = a.__fromString(e);\n\n          if (null === _) throw new SyntaxError(\"Cannot convert \" + e + \" to a BigInt\");\n          return _;\n        }\n\n        if (\"boolean\" == typeof e) return !0 === e ? a.__oneDigit(1, !1) : a.__zero();\n\n        if (\"object\" === i(e)) {\n          if (e.constructor === a) return e;\n\n          var n = a.__toPrimitive(e);\n\n          return a.BigInt(n);\n        }\n\n        throw new TypeError(\"Cannot convert \" + e + \" to a BigInt\");\n      }\n    }, {\n      key: \"toNumber\",\n      value: function value(e) {\n        var t = e.length;\n        if (0 === t) return 0;\n\n        if (1 === t) {\n          var i = e.__unsignedDigit(0);\n\n          return e.sign ? -i : i;\n        }\n\n        var _ = e.__digit(t - 1),\n            n = a.__clz30(_),\n            l = 30 * t - n;\n\n        if (1024 < l) return e.sign ? -Infinity : 1 / 0;\n        var g = l - 1,\n            o = _,\n            s = t - 1,\n            u = n + 3,\n            r = 32 === u ? 0 : o << u;\n        r >>>= 12;\n        var d = u - 12,\n            h = 12 <= u ? 0 : o << 20 + u,\n            b = 20 + u;\n\n        for (0 < d && 0 < s && (s--, o = e.__digit(s), r |= o >>> 30 - d, h = o << d + 2, b = d + 2); 0 < b && 0 < s;) {\n          s--, o = e.__digit(s), h |= 30 <= b ? o << b - 30 : o >>> 30 - b, b -= 30;\n        }\n\n        var m = a.__decideRounding(e, b, s, o);\n\n        if ((1 === m || 0 === m && 1 == (1 & h)) && (h = h + 1 >>> 0, 0 === h && (r++, 0 != r >>> 20 && (r = 0, g++, 1023 < g)))) return e.sign ? -Infinity : 1 / 0;\n        var c = e.sign ? -2147483648 : 0;\n        return g = g + 1023 << 20, a.__kBitConversionInts[1] = c | g | r, a.__kBitConversionInts[0] = h, a.__kBitConversionDouble[0];\n      }\n    }, {\n      key: \"unaryMinus\",\n      value: function value(e) {\n        if (0 === e.length) return e;\n\n        var t = e.__copy();\n\n        return t.sign = !e.sign, t;\n      }\n    }, {\n      key: \"bitwiseNot\",\n      value: function value(e) {\n        return e.sign ? a.__absoluteSubOne(e).__trim() : a.__absoluteAddOne(e, !0);\n      }\n    }, {\n      key: \"exponentiate\",\n      value: function value(e, t) {\n        if (t.sign) throw new RangeError(\"Exponent must be positive\");\n        if (0 === t.length) return a.__oneDigit(1, !1);\n        if (0 === e.length) return e;\n        if (1 === e.length && 1 === e.__digit(0)) return e.sign && 0 == (1 & t.__digit(0)) ? a.unaryMinus(e) : e;\n        if (1 < t.length) throw new RangeError(\"BigInt too big\");\n\n        var i = t.__unsignedDigit(0);\n\n        if (1 === i) return e;\n        if (i >= a.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n\n        if (1 === e.length && 2 === e.__digit(0)) {\n          var _ = 1 + (0 | i / 30),\n              n = e.sign && 0 != (1 & i),\n              l = new a(_, n);\n\n          l.__initializeDigits();\n\n          var g = 1 << i % 30;\n          return l.__setDigit(_ - 1, g), l;\n        }\n\n        var o = null,\n            s = e;\n\n        for (0 != (1 & i) && (o = e), i >>= 1; 0 !== i; i >>= 1) {\n          s = a.multiply(s, s), 0 != (1 & i) && (null === o ? o = s : o = a.multiply(o, s));\n        }\n\n        return o;\n      }\n    }, {\n      key: \"multiply\",\n      value: function value(e, t) {\n        if (0 === e.length) return e;\n        if (0 === t.length) return t;\n\n        var _ = e.length + t.length;\n\n        30 <= e.__clzmsd() + t.__clzmsd() && _--;\n        var n = new a(_, e.sign !== t.sign);\n\n        n.__initializeDigits();\n\n        for (var l = 0; l < e.length; l++) {\n          a.__multiplyAccumulate(t, e.__digit(l), n, l);\n        }\n\n        return n.__trim();\n      }\n    }, {\n      key: \"divide\",\n      value: function value(e, t) {\n        if (0 === t.length) throw new RangeError(\"Division by zero\");\n        if (0 > a.__absoluteCompare(e, t)) return a.__zero();\n\n        var i,\n            _ = e.sign !== t.sign,\n            n = t.__unsignedDigit(0);\n\n        if (1 === t.length && 32767 >= n) {\n          if (1 === n) return _ === e.sign ? e : a.unaryMinus(e);\n          i = a.__absoluteDivSmall(e, n, null);\n        } else i = a.__absoluteDivLarge(e, t, !0, !1);\n\n        return i.sign = _, i.__trim();\n      }\n    }, {\n      key: \"remainder\",\n      value: function i(e, t) {\n        if (0 === t.length) throw new RangeError(\"Division by zero\");\n        if (0 > a.__absoluteCompare(e, t)) return e;\n\n        var _ = t.__unsignedDigit(0);\n\n        if (1 === t.length && 32767 >= _) {\n          if (1 === _) return a.__zero();\n\n          var n = a.__absoluteModSmall(e, _);\n\n          return 0 === n ? a.__zero() : a.__oneDigit(n, e.sign);\n        }\n\n        var i = a.__absoluteDivLarge(e, t, !1, !0);\n\n        return i.sign = e.sign, i.__trim();\n      }\n    }, {\n      key: \"add\",\n      value: function value(e, t) {\n        var i = e.sign;\n        return i === t.sign ? a.__absoluteAdd(e, t, i) : 0 <= a.__absoluteCompare(e, t) ? a.__absoluteSub(e, t, i) : a.__absoluteSub(t, e, !i);\n      }\n    }, {\n      key: \"subtract\",\n      value: function value(e, t) {\n        var i = e.sign;\n        return i === t.sign ? 0 <= a.__absoluteCompare(e, t) ? a.__absoluteSub(e, t, i) : a.__absoluteSub(t, e, !i) : a.__absoluteAdd(e, t, i);\n      }\n    }, {\n      key: \"leftShift\",\n      value: function value(e, t) {\n        return 0 === t.length || 0 === e.length ? e : t.sign ? a.__rightShiftByAbsolute(e, t) : a.__leftShiftByAbsolute(e, t);\n      }\n    }, {\n      key: \"signedRightShift\",\n      value: function value(e, t) {\n        return 0 === t.length || 0 === e.length ? e : t.sign ? a.__leftShiftByAbsolute(e, t) : a.__rightShiftByAbsolute(e, t);\n      }\n    }, {\n      key: \"unsignedRightShift\",\n      value: function value() {\n        throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\");\n      }\n    }, {\n      key: \"lessThan\",\n      value: function value(e, t) {\n        return 0 > a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"lessThanOrEqual\",\n      value: function value(e, t) {\n        return 0 >= a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"greaterThan\",\n      value: function value(e, t) {\n        return 0 < a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"greaterThanOrEqual\",\n      value: function value(e, t) {\n        return 0 <= a.__compareToBigInt(e, t);\n      }\n    }, {\n      key: \"equal\",\n      value: function value(e, t) {\n        if (e.sign !== t.sign) return !1;\n        if (e.length !== t.length) return !1;\n\n        for (var _ = 0; _ < e.length; _++) {\n          if (e.__digit(_) !== t.__digit(_)) return !1;\n        }\n\n        return !0;\n      }\n    }, {\n      key: \"notEqual\",\n      value: function value(e, t) {\n        return !a.equal(e, t);\n      }\n    }, {\n      key: \"bitwiseAnd\",\n      value: function value(e, t) {\n        if (!e.sign && !t.sign) return a.__absoluteAnd(e, t).__trim();\n\n        if (e.sign && t.sign) {\n          var i = n(e.length, t.length) + 1,\n              _ = a.__absoluteSubOne(e, i),\n              l = a.__absoluteSubOne(t);\n\n          return _ = a.__absoluteOr(_, l, _), a.__absoluteAddOne(_, !0, _).__trim();\n        }\n\n        if (e.sign) {\n          var g = [t, e];\n          e = g[0], t = g[1];\n        }\n\n        return a.__absoluteAndNot(e, a.__absoluteSubOne(t)).__trim();\n      }\n    }, {\n      key: \"bitwiseXor\",\n      value: function value(e, t) {\n        if (!e.sign && !t.sign) return a.__absoluteXor(e, t).__trim();\n\n        if (e.sign && t.sign) {\n          var i = n(e.length, t.length),\n              _ = a.__absoluteSubOne(e, i),\n              l = a.__absoluteSubOne(t);\n\n          return a.__absoluteXor(_, l, _).__trim();\n        }\n\n        var g = n(e.length, t.length) + 1;\n\n        if (e.sign) {\n          var o = [t, e];\n          e = o[0], t = o[1];\n        }\n\n        var s = a.__absoluteSubOne(t, g);\n\n        return s = a.__absoluteXor(s, e, s), a.__absoluteAddOne(s, !0, s).__trim();\n      }\n    }, {\n      key: \"bitwiseOr\",\n      value: function value(e, t) {\n        var i = n(e.length, t.length);\n        if (!e.sign && !t.sign) return a.__absoluteOr(e, t).__trim();\n\n        if (e.sign && t.sign) {\n          var _ = a.__absoluteSubOne(e, i),\n              l = a.__absoluteSubOne(t);\n\n          return _ = a.__absoluteAnd(_, l, _), a.__absoluteAddOne(_, !0, _).__trim();\n        }\n\n        if (e.sign) {\n          var g = [t, e];\n          e = g[0], t = g[1];\n        }\n\n        var o = a.__absoluteSubOne(t, i);\n\n        return o = a.__absoluteAndNot(o, e, o), a.__absoluteAddOne(o, !0, o).__trim();\n      }\n    }, {\n      key: \"asIntN\",\n      value: function value(e, t) {\n        if (0 === t.length) return t;\n        if (e = o(e), 0 > e) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === e) return a.__zero();\n        if (e >= a.__kMaxLengthBits) return t;\n\n        var _ = 0 | (e + 29) / 30;\n\n        if (t.length < _) return t;\n\n        var l = t.__unsignedDigit(_ - 1),\n            g = 1 << (e - 1) % 30;\n\n        if (t.length === _ && l < g) return t;\n        if (!((l & g) === g)) return a.__truncateToNBits(e, t);\n        if (!t.sign) return a.__truncateAndSubFromPowerOfTwo(e, t, !0);\n\n        if (0 == (l & g - 1)) {\n          for (var s = _ - 2; 0 <= s; s--) {\n            if (0 !== t.__digit(s)) return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n          }\n\n          return t.length === _ && l === g ? t : a.__truncateToNBits(e, t);\n        }\n\n        return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n      }\n    }, {\n      key: \"asUintN\",\n      value: function value(e, t) {\n        if (0 === t.length) return t;\n        if (e = o(e), 0 > e) throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");\n        if (0 === e) return a.__zero();\n\n        if (t.sign) {\n          if (e > a.__kMaxLengthBits) throw new RangeError(\"BigInt too big\");\n          return a.__truncateAndSubFromPowerOfTwo(e, t, !1);\n        }\n\n        if (e >= a.__kMaxLengthBits) return t;\n        var i = 0 | (e + 29) / 30;\n        if (t.length < i) return t;\n\n        var _ = e % 30;\n\n        if (t.length == i) {\n          if (0 === _) return t;\n\n          var l = t.__digit(i - 1);\n\n          if (0 == l >>> _) return t;\n        }\n\n        return a.__truncateToNBits(e, t);\n      }\n    }, {\n      key: \"ADD\",\n      value: function value(e, t) {\n        if (e = a.__toPrimitive(e), t = a.__toPrimitive(t), \"string\" == typeof e) return \"string\" != typeof t && (t = t.toString()), e + t;\n        if (\"string\" == typeof t) return e.toString() + t;\n        if (e = a.__toNumeric(e), t = a.__toNumeric(t), a.__isBigInt(e) && a.__isBigInt(t)) return a.add(e, t);\n        if (\"number\" == typeof e && \"number\" == typeof t) return e + t;\n        throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\");\n      }\n    }, {\n      key: \"LT\",\n      value: function value(e, t) {\n        return a.__compare(e, t, 0);\n      }\n    }, {\n      key: \"LE\",\n      value: function value(e, t) {\n        return a.__compare(e, t, 1);\n      }\n    }, {\n      key: \"GT\",\n      value: function value(e, t) {\n        return a.__compare(e, t, 2);\n      }\n    }, {\n      key: \"GE\",\n      value: function value(e, t) {\n        return a.__compare(e, t, 3);\n      }\n    }, {\n      key: \"EQ\",\n      value: function value(e, t) {\n        for (;;) {\n          if (a.__isBigInt(e)) return a.__isBigInt(t) ? a.equal(e, t) : a.EQ(t, e);\n\n          if (\"number\" == typeof e) {\n            if (a.__isBigInt(t)) return a.__equalToNumber(t, e);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"string\" == typeof e) {\n            if (a.__isBigInt(t)) return e = a.__fromString(e), null !== e && a.equal(e, t);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"boolean\" == typeof e) {\n            if (a.__isBigInt(t)) return a.__equalToNumber(t, +e);\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"symbol\" === i(e)) {\n            if (a.__isBigInt(t)) return !1;\n            if (\"object\" !== i(t)) return e == t;\n            t = a.__toPrimitive(t);\n          } else if (\"object\" === i(e)) {\n            if (\"object\" === i(t) && t.constructor !== a) return e == t;\n            e = a.__toPrimitive(e);\n          } else return e == t;\n        }\n      }\n    }, {\n      key: \"NE\",\n      value: function value(e, t) {\n        return !a.EQ(e, t);\n      }\n    }, {\n      key: \"__zero\",\n      value: function value() {\n        return new a(0, !1);\n      }\n    }, {\n      key: \"__oneDigit\",\n      value: function value(e, t) {\n        var i = new a(1, t);\n        return i.__setDigit(0, e), i;\n      }\n    }, {\n      key: \"__decideRounding\",\n      value: function value(e, t, i, _) {\n        if (0 < t) return -1;\n        var n;\n        if (0 > t) n = -t - 1;else {\n          if (0 === i) return -1;\n          i--, _ = e.__digit(i), n = 29;\n        }\n        var l = 1 << n;\n        if (0 == (_ & l)) return -1;\n        if (l -= 1, 0 != (_ & l)) return 1;\n\n        for (; 0 < i;) {\n          if (i--, 0 !== e.__digit(i)) return 1;\n        }\n\n        return 0;\n      }\n    }, {\n      key: \"__fromDouble\",\n      value: function value(e) {\n        a.__kBitConversionDouble[0] = e;\n\n        var t,\n            i = 2047 & a.__kBitConversionInts[1] >>> 20,\n            _ = i - 1023,\n            n = (0 | _ / 30) + 1,\n            l = new a(n, 0 > e),\n            g = 1048575 & a.__kBitConversionInts[1] | 1048576,\n            o = a.__kBitConversionInts[0],\n            s = 20,\n            u = _ % 30,\n            r = 0;\n\n        if (u < s) {\n          var d = s - u;\n          r = d + 32, t = g >>> d, g = g << 32 - d | o >>> d, o <<= 32 - d;\n        } else if (u === s) r = 32, t = g, g = o, o = 0;else {\n          var h = u - s;\n          r = 32 - h, t = g << h | o >>> 32 - h, g = o << h, o = 0;\n        }\n\n        l.__setDigit(n - 1, t);\n\n        for (var b = n - 2; 0 <= b; b--) {\n          0 < r ? (r -= 30, t = g >>> 2, g = g << 30 | o >>> 2, o <<= 30) : t = 0, l.__setDigit(b, t);\n        }\n\n        return l.__trim();\n      }\n    }, {\n      key: \"__isWhitespace\",\n      value: function value(e) {\n        return !!(13 >= e && 9 <= e) || (159 >= e ? 32 == e : 131071 >= e ? 160 == e || 5760 == e : 196607 >= e ? (e &= 131071, 10 >= e || 40 == e || 41 == e || 47 == e || 95 == e || 4096 == e) : 65279 == e);\n      }\n    }, {\n      key: \"__fromString\",\n      value: function value(e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,\n            i = 0,\n            _ = e.length,\n            n = 0;\n        if (n === _) return a.__zero();\n\n        for (var l = e.charCodeAt(n); a.__isWhitespace(l);) {\n          if (++n === _) return a.__zero();\n          l = e.charCodeAt(n);\n        }\n\n        if (43 === l) {\n          if (++n === _) return null;\n          l = e.charCodeAt(n), i = 1;\n        } else if (45 === l) {\n          if (++n === _) return null;\n          l = e.charCodeAt(n), i = -1;\n        }\n\n        if (0 === t) {\n          if (t = 10, 48 === l) {\n            if (++n === _) return a.__zero();\n\n            if (l = e.charCodeAt(n), 88 === l || 120 === l) {\n              if (t = 16, ++n === _) return null;\n              l = e.charCodeAt(n);\n            } else if (79 === l || 111 === l) {\n              if (t = 8, ++n === _) return null;\n              l = e.charCodeAt(n);\n            } else if (66 === l || 98 === l) {\n              if (t = 2, ++n === _) return null;\n              l = e.charCodeAt(n);\n            }\n          }\n        } else if (16 === t && 48 === l) {\n          if (++n === _) return a.__zero();\n\n          if (l = e.charCodeAt(n), 88 === l || 120 === l) {\n            if (++n === _) return null;\n            l = e.charCodeAt(n);\n          }\n        }\n\n        if (0 !== i && 10 !== t) return null;\n\n        for (; 48 === l;) {\n          if (++n === _) return a.__zero();\n          l = e.charCodeAt(n);\n        }\n\n        var g = _ - n,\n            o = a.__kMaxBitsPerChar[t],\n            s = a.__kBitsPerCharTableMultiplier - 1;\n        if (g > 1073741824 / o) return null;\n        var u = o * g + s >>> a.__kBitsPerCharTableShift,\n            r = new a(0 | (u + 29) / 30, !1),\n            h = 10 > t ? t : 10,\n            b = 10 < t ? t - 10 : 0;\n\n        if (0 == (t & t - 1)) {\n          o >>= a.__kBitsPerCharTableShift;\n          var c = [],\n              v = [],\n              f = !1;\n\n          do {\n            for (var y, D = 0, k = 0;;) {\n              if (y = void 0, l - 48 >>> 0 < h) y = l - 48;else if ((32 | l) - 97 >>> 0 < b) y = (32 | l) - 87;else {\n                f = !0;\n                break;\n              }\n\n              if (k += o, D = D << o | y, ++n === _) {\n                f = !0;\n                break;\n              }\n\n              if (l = e.charCodeAt(n), 30 < k + o) break;\n            }\n\n            c.push(D), v.push(k);\n          } while (!f);\n\n          a.__fillFromParts(r, c, v);\n        } else {\n          r.__initializeDigits();\n\n          var p = !1,\n              B = 0;\n\n          do {\n            for (var S, C = 0, A = 1;;) {\n              if (S = void 0, l - 48 >>> 0 < h) S = l - 48;else if ((32 | l) - 97 >>> 0 < b) S = (32 | l) - 87;else {\n                p = !0;\n                break;\n              }\n              var I = A * t;\n              if (1073741823 < I) break;\n\n              if (A = I, C = C * t + S, B++, ++n === _) {\n                p = !0;\n                break;\n              }\n\n              l = e.charCodeAt(n);\n            }\n\n            s = 30 * a.__kBitsPerCharTableMultiplier - 1;\n            var m = 0 | (o * B + s >>> a.__kBitsPerCharTableShift) / 30;\n\n            r.__inplaceMultiplyAdd(A, C, m);\n          } while (!p);\n        }\n\n        if (n !== _) {\n          if (!a.__isWhitespace(l)) return null;\n\n          for (n++; n < _; n++) {\n            if (l = e.charCodeAt(n), !a.__isWhitespace(l)) return null;\n          }\n        }\n\n        return r.sign = -1 === i, r.__trim();\n      }\n    }, {\n      key: \"__fillFromParts\",\n      value: function value(e, t, _) {\n        for (var n = 0, l = 0, g = 0, o = t.length - 1; 0 <= o; o--) {\n          var a = t[o],\n              s = _[o];\n          l |= a << g, g += s, 30 === g ? (e.__setDigit(n++, l), g = 0, l = 0) : 30 < g && (e.__setDigit(n++, 1073741823 & l), g -= 30, l = a >>> s - g);\n        }\n\n        if (0 !== l) {\n          if (n >= e.length) throw new Error(\"implementation bug\");\n\n          e.__setDigit(n++, l);\n        }\n\n        for (; n < e.length; n++) {\n          e.__setDigit(n, 0);\n        }\n      }\n    }, {\n      key: \"__toStringBasePowerOfTwo\",\n      value: function value(e, t) {\n        var _ = e.length,\n            n = t - 1;\n        n = (85 & n >>> 1) + (85 & n), n = (51 & n >>> 2) + (51 & n), n = (15 & n >>> 4) + (15 & n);\n\n        var l = n,\n            g = t - 1,\n            o = e.__digit(_ - 1),\n            s = a.__clz30(o),\n            u = 0 | (30 * _ - s + l - 1) / l;\n\n        if (e.sign && u++, 268435456 < u) throw new Error(\"string too long\");\n\n        for (var r = Array(u), d = u - 1, h = 0, b = 0, m = 0; m < _ - 1; m++) {\n          var c = e.__digit(m),\n              v = (h | c << b) & g;\n\n          r[d--] = a.__kConversionChars[v];\n          var f = l - b;\n\n          for (h = c >>> f, b = 30 - f; b >= l;) {\n            r[d--] = a.__kConversionChars[h & g], h >>>= l, b -= l;\n          }\n        }\n\n        var y = (h | o << b) & g;\n\n        for (r[d--] = a.__kConversionChars[y], h = o >>> l - b; 0 !== h;) {\n          r[d--] = a.__kConversionChars[h & g], h >>>= l;\n        }\n\n        if (e.sign && (r[d--] = \"-\"), -1 !== d) throw new Error(\"implementation bug\");\n        return r.join(\"\");\n      }\n    }, {\n      key: \"__toStringGeneric\",\n      value: function value(e, t, _) {\n        var n = e.length;\n        if (0 === n) return \"\";\n\n        if (1 === n) {\n          var l = e.__unsignedDigit(0).toString(t);\n\n          return !1 === _ && e.sign && (l = \"-\" + l), l;\n        }\n\n        var g = 30 * n - a.__clz30(e.__digit(n - 1)),\n            o = a.__kMaxBitsPerChar[t],\n            s = o - 1,\n            u = g * a.__kBitsPerCharTableMultiplier;\n\n        u += s - 1, u = 0 | u / s;\n\n        var r,\n            d,\n            h = u + 1 >> 1,\n            b = a.exponentiate(a.__oneDigit(t, !1), a.__oneDigit(h, !1)),\n            m = b.__unsignedDigit(0);\n\n        if (1 === b.length && 32767 >= m) {\n          r = new a(e.length, !1), r.__initializeDigits();\n\n          for (var c, v = 0, f = 2 * e.length - 1; 0 <= f; f--) {\n            c = v << 15 | e.__halfDigit(f), r.__setHalfDigit(f, 0 | c / m), v = 0 | c % m;\n          }\n\n          d = v.toString(t);\n        } else {\n          var y = a.__absoluteDivLarge(e, b, !0, !0);\n\n          r = y.quotient;\n\n          var D = y.remainder.__trim();\n\n          d = a.__toStringGeneric(D, t, !0);\n        }\n\n        r.__trim();\n\n        for (var k = a.__toStringGeneric(r, t, !0); d.length < h;) {\n          d = \"0\" + d;\n        }\n\n        return !1 === _ && e.sign && (k = \"-\" + k), k + d;\n      }\n    }, {\n      key: \"__unequalSign\",\n      value: function value(e) {\n        return e ? -1 : 1;\n      }\n    }, {\n      key: \"__absoluteGreater\",\n      value: function value(e) {\n        return e ? -1 : 1;\n      }\n    }, {\n      key: \"__absoluteLess\",\n      value: function value(e) {\n        return e ? 1 : -1;\n      }\n    }, {\n      key: \"__compareToBigInt\",\n      value: function value(e, t) {\n        var i = e.sign;\n        if (i !== t.sign) return a.__unequalSign(i);\n\n        var _ = a.__absoluteCompare(e, t);\n\n        return 0 < _ ? a.__absoluteGreater(i) : 0 > _ ? a.__absoluteLess(i) : 0;\n      }\n    }, {\n      key: \"__compareToNumber\",\n      value: function value(e, i) {\n        if (a.__isOneDigitInt(i)) {\n          var _ = e.sign,\n              n = 0 > i;\n          if (_ !== n) return a.__unequalSign(_);\n\n          if (0 === e.length) {\n            if (n) throw new Error(\"implementation bug\");\n            return 0 === i ? 0 : -1;\n          }\n\n          if (1 < e.length) return a.__absoluteGreater(_);\n\n          var l = t(i),\n              g = e.__unsignedDigit(0);\n\n          return g > l ? a.__absoluteGreater(_) : g < l ? a.__absoluteLess(_) : 0;\n        }\n\n        return a.__compareToDouble(e, i);\n      }\n    }, {\n      key: \"__compareToDouble\",\n      value: function value(e, t) {\n        if (t !== t) return t;\n        if (t === 1 / 0) return -1;\n        if (t === -Infinity) return 1;\n        var i = e.sign;\n        if (i !== 0 > t) return a.__unequalSign(i);\n        if (0 === t) throw new Error(\"implementation bug: should be handled elsewhere\");\n        if (0 === e.length) return -1;\n        a.__kBitConversionDouble[0] = t;\n\n        var _ = 2047 & a.__kBitConversionInts[1] >>> 20;\n\n        if (2047 == _) throw new Error(\"implementation bug: handled elsewhere\");\n        var n = _ - 1023;\n        if (0 > n) return a.__absoluteGreater(i);\n\n        var l = e.length,\n            g = e.__digit(l - 1),\n            o = a.__clz30(g),\n            s = 30 * l - o,\n            u = n + 1;\n\n        if (s < u) return a.__absoluteLess(i);\n        if (s > u) return a.__absoluteGreater(i);\n        var r = 1048576 | 1048575 & a.__kBitConversionInts[1],\n            d = a.__kBitConversionInts[0],\n            h = 20,\n            b = 29 - o;\n        if (b !== (0 | (s - 1) % 30)) throw new Error(\"implementation bug\");\n        var m,\n            c = 0;\n\n        if (b < h) {\n          var v = h - b;\n          c = v + 32, m = r >>> v, r = r << 32 - v | d >>> v, d <<= 32 - v;\n        } else if (b === h) c = 32, m = r, r = d, d = 0;else {\n          var f = b - h;\n          c = 32 - f, m = r << f | d >>> 32 - f, r = d << f, d = 0;\n        }\n\n        if (g >>>= 0, m >>>= 0, g > m) return a.__absoluteGreater(i);\n        if (g < m) return a.__absoluteLess(i);\n\n        for (var y = l - 2; 0 <= y; y--) {\n          0 < c ? (c -= 30, m = r >>> 2, r = r << 30 | d >>> 2, d <<= 30) : m = 0;\n\n          var D = e.__unsignedDigit(y);\n\n          if (D > m) return a.__absoluteGreater(i);\n          if (D < m) return a.__absoluteLess(i);\n        }\n\n        if (0 !== r || 0 !== d) {\n          if (0 === c) throw new Error(\"implementation bug\");\n          return a.__absoluteLess(i);\n        }\n\n        return 0;\n      }\n    }, {\n      key: \"__equalToNumber\",\n      value: function value(e, i) {\n        return a.__isOneDigitInt(i) ? 0 === i ? 0 === e.length : 1 === e.length && e.sign === 0 > i && e.__unsignedDigit(0) === t(i) : 0 === a.__compareToDouble(e, i);\n      }\n    }, {\n      key: \"__comparisonResultToBool\",\n      value: function value(e, t) {\n        return 0 === t ? 0 > e : 1 === t ? 0 >= e : 2 === t ? 0 < e : 3 === t ? 0 <= e : void 0;\n      }\n    }, {\n      key: \"__compare\",\n      value: function value(e, t, i) {\n        if (e = a.__toPrimitive(e), t = a.__toPrimitive(t), \"string\" == typeof e && \"string\" == typeof t) switch (i) {\n          case 0:\n            return e < t;\n\n          case 1:\n            return e <= t;\n\n          case 2:\n            return e > t;\n\n          case 3:\n            return e >= t;\n        }\n        if (a.__isBigInt(e) && \"string\" == typeof t) return t = a.__fromString(t), null !== t && a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n        if (\"string\" == typeof e && a.__isBigInt(t)) return e = a.__fromString(e), null !== e && a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n\n        if (e = a.__toNumeric(e), t = a.__toNumeric(t), a.__isBigInt(e)) {\n          if (a.__isBigInt(t)) return a.__comparisonResultToBool(a.__compareToBigInt(e, t), i);\n          if (\"number\" != typeof t) throw new Error(\"implementation bug\");\n          return a.__comparisonResultToBool(a.__compareToNumber(e, t), i);\n        }\n\n        if (\"number\" != typeof e) throw new Error(\"implementation bug\");\n        if (a.__isBigInt(t)) return a.__comparisonResultToBool(a.__compareToNumber(t, e), 2 ^ i);\n        if (\"number\" != typeof t) throw new Error(\"implementation bug\");\n        return 0 === i ? e < t : 1 === i ? e <= t : 2 === i ? e > t : 3 === i ? e >= t : void 0;\n      }\n    }, {\n      key: \"__absoluteAdd\",\n      value: function value(e, t, _) {\n        if (e.length < t.length) return a.__absoluteAdd(t, e, _);\n        if (0 === e.length) return e;\n        if (0 === t.length) return e.sign === _ ? e : a.unaryMinus(e);\n        var n = e.length;\n        (0 === e.__clzmsd() || t.length === e.length && 0 === t.__clzmsd()) && n++;\n\n        for (var l, g = new a(n, _), o = 0, s = 0; s < t.length; s++) {\n          l = e.__digit(s) + t.__digit(s) + o, o = l >>> 30, g.__setDigit(s, 1073741823 & l);\n        }\n\n        for (; s < e.length; s++) {\n          var u = e.__digit(s) + o;\n          o = u >>> 30, g.__setDigit(s, 1073741823 & u);\n        }\n\n        return s < g.length && g.__setDigit(s, o), g.__trim();\n      }\n    }, {\n      key: \"__absoluteSub\",\n      value: function value(e, t, _) {\n        if (0 === e.length) return e;\n        if (0 === t.length) return e.sign === _ ? e : a.unaryMinus(e);\n\n        for (var n, l = new a(e.length, _), g = 0, o = 0; o < t.length; o++) {\n          n = e.__digit(o) - t.__digit(o) - g, g = 1 & n >>> 30, l.__setDigit(o, 1073741823 & n);\n        }\n\n        for (; o < e.length; o++) {\n          var s = e.__digit(o) - g;\n          g = 1 & s >>> 30, l.__setDigit(o, 1073741823 & s);\n        }\n\n        return l.__trim();\n      }\n    }, {\n      key: \"__absoluteAddOne\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n            n = e.length;\n\n        null === _ ? _ = new a(n, t) : _.sign = t;\n\n        for (var l, g = 1, o = 0; o < n; o++) {\n          l = e.__digit(o) + g, g = l >>> 30, _.__setDigit(o, 1073741823 & l);\n        }\n\n        return 0 !== g && _.__setDigitGrow(n, 1), _;\n      }\n    }, {\n      key: \"__absoluteSubOne\",\n      value: function value(e, t) {\n        var _ = e.length;\n        t = t || _;\n\n        for (var n, l = new a(t, !1), g = 1, o = 0; o < _; o++) {\n          n = e.__digit(o) - g, g = 1 & n >>> 30, l.__setDigit(o, 1073741823 & n);\n        }\n\n        if (0 !== g) throw new Error(\"implementation bug\");\n\n        for (var s = _; s < t; s++) {\n          l.__setDigit(s, 0);\n        }\n\n        return l;\n      }\n    }, {\n      key: \"__absoluteAnd\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n            n = e.length,\n            l = t.length,\n            g = l;\n\n        if (n < l) {\n          g = n;\n          var o = e,\n              s = n;\n          e = t, n = l, t = o, l = s;\n        }\n\n        var u = g;\n        null === _ ? _ = new a(u, !1) : u = _.length;\n\n        for (var r = 0; r < g; r++) {\n          _.__setDigit(r, e.__digit(r) & t.__digit(r));\n        }\n\n        for (; r < u; r++) {\n          _.__setDigit(r, 0);\n        }\n\n        return _;\n      }\n    }, {\n      key: \"__absoluteAndNot\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n            n = e.length,\n            l = t.length,\n            g = l;\n\n        n < l && (g = n);\n        var o = n;\n        null === _ ? _ = new a(o, !1) : o = _.length;\n\n        for (var s = 0; s < g; s++) {\n          _.__setDigit(s, e.__digit(s) & ~t.__digit(s));\n        }\n\n        for (; s < n; s++) {\n          _.__setDigit(s, e.__digit(s));\n        }\n\n        for (; s < o; s++) {\n          _.__setDigit(s, 0);\n        }\n\n        return _;\n      }\n    }, {\n      key: \"__absoluteOr\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n            n = e.length,\n            l = t.length,\n            g = l;\n\n        if (n < l) {\n          g = n;\n          var o = e,\n              s = n;\n          e = t, n = l, t = o, l = s;\n        }\n\n        var u = n;\n        null === _ ? _ = new a(u, !1) : u = _.length;\n\n        for (var r = 0; r < g; r++) {\n          _.__setDigit(r, e.__digit(r) | t.__digit(r));\n        }\n\n        for (; r < n; r++) {\n          _.__setDigit(r, e.__digit(r));\n        }\n\n        for (; r < u; r++) {\n          _.__setDigit(r, 0);\n        }\n\n        return _;\n      }\n    }, {\n      key: \"__absoluteXor\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,\n            n = e.length,\n            l = t.length,\n            g = l;\n\n        if (n < l) {\n          g = n;\n          var o = e,\n              s = n;\n          e = t, n = l, t = o, l = s;\n        }\n\n        var u = n;\n        null === _ ? _ = new a(u, !1) : u = _.length;\n\n        for (var r = 0; r < g; r++) {\n          _.__setDigit(r, e.__digit(r) ^ t.__digit(r));\n        }\n\n        for (; r < n; r++) {\n          _.__setDigit(r, e.__digit(r));\n        }\n\n        for (; r < u; r++) {\n          _.__setDigit(r, 0);\n        }\n\n        return _;\n      }\n    }, {\n      key: \"__absoluteCompare\",\n      value: function value(e, t) {\n        var _ = e.length - t.length;\n\n        if (0 != _) return _;\n\n        for (var n = e.length - 1; 0 <= n && e.__digit(n) === t.__digit(n);) {\n          n--;\n        }\n\n        return 0 > n ? 0 : e.__unsignedDigit(n) > t.__unsignedDigit(n) ? 1 : -1;\n      }\n    }, {\n      key: \"__multiplyAccumulate\",\n      value: function value(e, t, _, n) {\n        if (0 !== t) {\n          for (var l = 32767 & t, g = t >>> 15, o = 0, s = 0, u = 0; u < e.length; u++, n++) {\n            var r = _.__digit(n),\n                d = e.__digit(u),\n                h = 32767 & d,\n                b = d >>> 15,\n                m = a.__imul(h, l),\n                c = a.__imul(h, g),\n                v = a.__imul(b, l),\n                f = a.__imul(b, g);\n\n            r += s + m + o, o = r >>> 30, r &= 1073741823, r += ((32767 & c) << 15) + ((32767 & v) << 15), o += r >>> 30, s = f + (c >>> 15) + (v >>> 15), _.__setDigit(n, 1073741823 & r);\n          }\n\n          for (; 0 !== o || 0 !== s; n++) {\n            var y = _.__digit(n);\n\n            y += o + s, s = 0, o = y >>> 30, _.__setDigit(n, 1073741823 & y);\n          }\n        }\n      }\n    }, {\n      key: \"__internalMultiplyAdd\",\n      value: function value(e, t, _, l, g) {\n        for (var o = _, s = 0, u = 0; u < l; u++) {\n          var d = e.__digit(u),\n              h = a.__imul(32767 & d, t),\n              b = a.__imul(d >>> 15, t),\n              m = h + ((32767 & b) << 15) + s + o;\n\n          o = m >>> 30, s = b >>> 15, g.__setDigit(u, 1073741823 & m);\n        }\n\n        if (g.length > l) for (g.__setDigit(l++, o + s); l < g.length;) {\n          g.__setDigit(l++, 0);\n        } else if (0 !== o + s) throw new Error(\"implementation bug\");\n      }\n    }, {\n      key: \"__absoluteDivSmall\",\n      value: function value(e, t) {\n        var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n\n        null === _ && (_ = new a(e.length, !1));\n\n        for (var n = 0, l = 2 * e.length - 1; 0 <= l; l -= 2) {\n          var g = (n << 15 | e.__halfDigit(l)) >>> 0,\n              o = 0 | g / t;\n          n = 0 | g % t, g = (n << 15 | e.__halfDigit(l - 1)) >>> 0;\n          var s = 0 | g / t;\n          n = 0 | g % t, _.__setDigit(l >>> 1, o << 15 | s);\n        }\n\n        return _;\n      }\n    }, {\n      key: \"__absoluteModSmall\",\n      value: function value(e, t) {\n        for (var _, n = 0, l = 2 * e.length - 1; 0 <= l; l--) {\n          _ = (n << 15 | e.__halfDigit(l)) >>> 0, n = 0 | _ % t;\n        }\n\n        return n;\n      }\n    }, {\n      key: \"__absoluteDivLarge\",\n      value: function value(e, t, i, _) {\n        var l = t.__halfDigitLength(),\n            n = t.length,\n            g = e.__halfDigitLength() - l,\n            o = null;\n\n        i && (o = new a(g + 2 >>> 1, !1), o.__initializeDigits());\n        var s = new a(l + 2 >>> 1, !1);\n\n        s.__initializeDigits();\n\n        var r = a.__clz15(t.__halfDigit(l - 1));\n\n        0 < r && (t = a.__specialLeftShift(t, r, 0));\n\n        for (var d = a.__specialLeftShift(e, r, 1), u = t.__halfDigit(l - 1), h = 0, b = g; 0 <= b; b--) {\n          var m = 32767,\n              v = d.__halfDigit(b + l);\n\n          if (v !== u) {\n            var f = (v << 15 | d.__halfDigit(b + l - 1)) >>> 0;\n            m = 0 | f / u;\n\n            for (var y = 0 | f % u, D = t.__halfDigit(l - 2), k = d.__halfDigit(b + l - 2); a.__imul(m, D) >>> 0 > (y << 16 | k) >>> 0 && (m--, y += u, !(32767 < y));) {\n              ;\n            }\n          }\n\n          a.__internalMultiplyAdd(t, m, 0, n, s);\n\n          var p = d.__inplaceSub(s, b, l + 1);\n\n          0 !== p && (p = d.__inplaceAdd(t, b, l), d.__setHalfDigit(b + l, 32767 & d.__halfDigit(b + l) + p), m--), i && (1 & b ? h = m << 15 : o.__setDigit(b >>> 1, h | m));\n        }\n\n        if (_) return d.__inplaceRightShift(r), i ? {\n          quotient: o,\n          remainder: d\n        } : d;\n        if (i) return o;\n        throw new Error(\"unreachable\");\n      }\n    }, {\n      key: \"__clz15\",\n      value: function value(e) {\n        return a.__clz30(e) - 15;\n      }\n    }, {\n      key: \"__specialLeftShift\",\n      value: function value(e, t, _) {\n        var l = e.length,\n            n = new a(l + _, !1);\n\n        if (0 === t) {\n          for (var g = 0; g < l; g++) {\n            n.__setDigit(g, e.__digit(g));\n          }\n\n          return 0 < _ && n.__setDigit(l, 0), n;\n        }\n\n        for (var o, s = 0, u = 0; u < l; u++) {\n          o = e.__digit(u), n.__setDigit(u, 1073741823 & o << t | s), s = o >>> 30 - t;\n        }\n\n        return 0 < _ && n.__setDigit(l, s), n;\n      }\n    }, {\n      key: \"__leftShiftByAbsolute\",\n      value: function value(e, t) {\n        var _ = a.__toShiftAmount(t);\n\n        if (0 > _) throw new RangeError(\"BigInt too big\");\n        var n = 0 | _ / 30,\n            l = _ % 30,\n            g = e.length,\n            o = 0 !== l && 0 != e.__digit(g - 1) >>> 30 - l,\n            s = g + n + (o ? 1 : 0),\n            u = new a(s, e.sign);\n\n        if (0 === l) {\n          for (var r = 0; r < n; r++) {\n            u.__setDigit(r, 0);\n          }\n\n          for (; r < s; r++) {\n            u.__setDigit(r, e.__digit(r - n));\n          }\n        } else {\n          for (var h = 0, b = 0; b < n; b++) {\n            u.__setDigit(b, 0);\n          }\n\n          for (var m, c = 0; c < g; c++) {\n            m = e.__digit(c), u.__setDigit(c + n, 1073741823 & m << l | h), h = m >>> 30 - l;\n          }\n\n          if (o) u.__setDigit(g + n, h);else if (0 !== h) throw new Error(\"implementation bug\");\n        }\n\n        return u.__trim();\n      }\n    }, {\n      key: \"__rightShiftByAbsolute\",\n      value: function value(e, t) {\n        var _ = e.length,\n            n = e.sign,\n            l = a.__toShiftAmount(t);\n\n        if (0 > l) return a.__rightShiftByMaximum(n);\n        var g = 0 | l / 30,\n            o = l % 30,\n            s = _ - g;\n        if (0 >= s) return a.__rightShiftByMaximum(n);\n        var u = !1;\n\n        if (n) {\n          if (0 != (e.__digit(g) & (1 << o) - 1)) u = !0;else for (var r = 0; r < g; r++) {\n            if (0 !== e.__digit(r)) {\n              u = !0;\n              break;\n            }\n          }\n        }\n\n        if (u && 0 === o) {\n          var h = e.__digit(_ - 1);\n\n          0 == ~h && s++;\n        }\n\n        var b = new a(s, n);\n\n        if (0 === o) {\n          b.__setDigit(s - 1, 0);\n\n          for (var m = g; m < _; m++) {\n            b.__setDigit(m - g, e.__digit(m));\n          }\n        } else {\n          for (var c, v = e.__digit(g) >>> o, f = _ - g - 1, y = 0; y < f; y++) {\n            c = e.__digit(y + g + 1), b.__setDigit(y, 1073741823 & c << 30 - o | v), v = c >>> o;\n          }\n\n          b.__setDigit(f, v);\n        }\n\n        return u && (b = a.__absoluteAddOne(b, !0, b)), b.__trim();\n      }\n    }, {\n      key: \"__rightShiftByMaximum\",\n      value: function value(e) {\n        return e ? a.__oneDigit(1, !0) : a.__zero();\n      }\n    }, {\n      key: \"__toShiftAmount\",\n      value: function value(e) {\n        if (1 < e.length) return -1;\n\n        var t = e.__unsignedDigit(0);\n\n        return t > a.__kMaxLengthBits ? -1 : t;\n      }\n    }, {\n      key: \"__toPrimitive\",\n      value: function value(e) {\n        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \"default\";\n        if (\"object\" !== i(e)) return e;\n        if (e.constructor === a) return e;\n\n        if (\"undefined\" != typeof Symbol && \"symbol\" === i(Symbol.toPrimitive)) {\n          var _ = e[Symbol.toPrimitive];\n\n          if (_) {\n            var n = _(t);\n\n            if (\"object\" !== i(n)) return n;\n            throw new TypeError(\"Cannot convert object to primitive value\");\n          }\n        }\n\n        var l = e.valueOf;\n\n        if (l) {\n          var g = l.call(e);\n          if (\"object\" !== i(g)) return g;\n        }\n\n        var o = e.toString;\n\n        if (o) {\n          var s = o.call(e);\n          if (\"object\" !== i(s)) return s;\n        }\n\n        throw new TypeError(\"Cannot convert object to primitive value\");\n      }\n    }, {\n      key: \"__toNumeric\",\n      value: function value(e) {\n        return a.__isBigInt(e) ? e : +e;\n      }\n    }, {\n      key: \"__isBigInt\",\n      value: function value(e) {\n        return \"object\" === i(e) && null !== e && e.constructor === a;\n      }\n    }, {\n      key: \"__truncateToNBits\",\n      value: function value(e, t) {\n        for (var _ = 0 | (e + 29) / 30, n = new a(_, t.sign), l = _ - 1, g = 0; g < l; g++) {\n          n.__setDigit(g, t.__digit(g));\n        }\n\n        var o = t.__digit(l);\n\n        if (0 != e % 30) {\n          var s = 32 - e % 30;\n          o = o << s >>> s;\n        }\n\n        return n.__setDigit(l, o), n.__trim();\n      }\n    }, {\n      key: \"__truncateAndSubFromPowerOfTwo\",\n      value: function value(e, t, _) {\n        for (var n = Math.min, l, g = 0 | (e + 29) / 30, o = new a(g, _), s = 0, u = g - 1, d = 0, h = n(u, t.length); s < h; s++) {\n          l = 0 - t.__digit(s) - d, d = 1 & l >>> 30, o.__setDigit(s, 1073741823 & l);\n        }\n\n        for (; s < u; s++) {\n          o.__setDigit(s, 0 | 1073741823 & -d);\n        }\n\n        var b,\n            m = u < t.length ? t.__digit(u) : 0,\n            c = e % 30;\n        if (0 === c) b = 0 - m - d, b &= 1073741823;else {\n          var v = 32 - c;\n          m = m << v >>> v;\n          var f = 1 << 32 - v;\n          b = f - m - d, b &= f - 1;\n        }\n        return o.__setDigit(u, b), o.__trim();\n      }\n    }, {\n      key: \"__digitPow\",\n      value: function value(e, t) {\n        for (var i = 1; 0 < t;) {\n          1 & t && (i *= e), t >>>= 1, e *= e;\n        }\n\n        return i;\n      }\n    }, {\n      key: \"__isOneDigitInt\",\n      value: function value(e) {\n        return (1073741823 & e) === e;\n      }\n    }]), a;\n  }(h(Array));\n\n  return D.__kMaxLength = 33554432, D.__kMaxLengthBits = D.__kMaxLength << 5, D.__kMaxBitsPerChar = [0, 0, 32, 51, 64, 75, 83, 90, 96, 102, 107, 111, 115, 119, 122, 126, 128, 131, 134, 136, 139, 141, 143, 145, 147, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166], D.__kBitsPerCharTableShift = 5, D.__kBitsPerCharTableMultiplier = 1 << D.__kBitsPerCharTableShift, D.__kConversionChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], D.__kBitConversionBuffer = new ArrayBuffer(8), D.__kBitConversionDouble = new Float64Array(D.__kBitConversionBuffer), D.__kBitConversionInts = new Int32Array(D.__kBitConversionBuffer), D.__clz30 = t ? function (e) {\n    return t(e) - 2;\n  } : function (e) {\n    var t = Math.LN2,\n        i = Math.log;\n    return 0 === e ? 30 : 0 | 29 - (0 | i(e >>> 0) / t);\n  }, D.__imul = e || function (e, t) {\n    return 0 | e * t;\n  }, D;\n});","map":{"version":3,"sources":["../tsc-out/jsbi.mjs"],"names":["JSBI","Array","length","sign","Object","__kMaxLength","arg","Number","Math","floor","result","primitive","digit","radix","xLength","x","value","xMsd","msdLeadingZeros","xBitLength","exponent","currentDigit","digitIndex","shift","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","signBit","y","expValue","__kMaxLengthBits","neededDigits","_result","msd","runningSquare","resultLength","i","resultSign","divisor","quotient","remainderDigit","remainder","max","y1","_resultLength","_result2","_result3","n","neededLength","topDigit","compareDigit","bitsInTopDigit","newLength","last","topUnconsumedBit","mask","rawExponent","digits","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","_shift","c","string","cursor","current","chars","bitsPerChar","roundup","bitsMin","limDigit","limAlpha","parts","partsBits","done","part","bits","d","_done","charsSoFar","_part","multiplier","_d","m","digitsSoFar","bitsInDigit","partBits","charMask","charsRequired","pos","availableBits","newDigit","_current3","consumedBits","bitLength","maxBitsPerChar","minBitsPerChar","secondHalfChars","conqueror","input","secondHalf","divisionResult","_remainder","firstHalf","leftNegative","bothNegative","xSign","ySign","yAbs","abs","xDigit","Infinity","yBitLength","compareMantissa","_shift2","op","carry","r","_r6","borrow","_r7","inputLength","_i2","yLength","numPairs","tmp","tmpLength","diff","m2Low","m2High","high","multiplicand","accumulatorIndex","acc","accumulator","m1","m1Low","m1High","rLow","rMid1","rMid2","rHigh","_acc","summand","source","rx","ry","mLow","mHigh","dLow","dHigh","pLow","pMid1","pMid2","pHigh","__setDigit","upperHalf","lowerHalf","n2","dividend","q","wantQuotient","qhatv","u","vn1","halfDigitBuffer","j","qhat","ujn","rhat","vn2","ujn2","wantRemainder","startIndex","halfDigits","sum","__setHalfDigit","r0","_sub","subtrahend","_r","sub","r15","_i","_current2","_sub3","_r4","_r5","_current","_sub2","_r2","_r3","addDigit","_i3","digitShift","bitsShift","grow","_i4","_i5","mustRoundDown","_i6","_i7","hint","obj","Symbol","toPrimitive","exoticToPrim","valueOf","_primitive","toString","_primitive2","drop","limit","min","msdBitsConsumed","resultMsd","minuendMsd","len","previous","updated","base","__kBitsPerCharTableShift","clz32","imul"],"mappings":"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","sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"]},"metadata":{},"sourceType":"script"}