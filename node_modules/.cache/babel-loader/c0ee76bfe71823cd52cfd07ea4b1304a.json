{"ast":null,"code":"import _toConsumableArray from\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _defineProperty from\"/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import{ChainId,Fraction,JSBI,Percent,Token,WETH}from'moonwalkerswap-avalanche-sdk';import{injected,walletconnect,walletlink}from'../connectors';export var ROUTER_ADDRESS='0xde8922465457beaebbe7e9dc35c6ae56650be685';export var ZERO_ADDRESS='0x0000000000000000000000000000000000000000';// a list of tokens by chain\nexport var DAIe=new Token(ChainId.AVALANCHE,'0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',18,'DAI','Dai Stablecoin');export var BUSDe=new Token(ChainId.AVALANCHE,'0xe9e7cea3dedca5984780bafc599bd69add087d56',18,'BUSD','Binance USD');export var USDTe=new Token(ChainId.AVALANCHE,'0x55d398326f99059ff775485246999027b3197955',18,'USDT','Tether USD');export var USDC=new Token(ChainId.AVALANCHE,'0x55d398326f99059ff775485246999027b3197955',18,'USDT','Tether USD');export var ETH=new Token(ChainId.AVALANCHE,'0x2170ed0880ac9a755fd29b2688956bd959f933f8',18,'ETH','Binance-Peg Ethereum Token');var WETH_ONLY=_defineProperty({},ChainId.AVALANCHE,[WETH[ChainId.AVALANCHE]]);// export const GOVERNANCE_ADDRESS = '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\nvar SOLAR_ADDRESS='0x5ce9680bddc91d955a51b959f5cabaf466b0be5a';export var SOLAR=_defineProperty({},ChainId.AVALANCHE,new Token(ChainId.AVALANCHE,SOLAR_ADDRESS,18,'SLR','Solar Moonwalkerswap'));// TODO: specify merkle distributor for mainnet\nexport var MERKLE_DISTRIBUTOR_ADDRESS=_defineProperty({},ChainId.AVALANCHE,'0x5751b2880d7fe4b1c9e7845ea58221456530afe7');// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.AVALANCHE,[].concat(_toConsumableArray(WETH_ONLY[ChainId.AVALANCHE]),[DAIe,BUSDe,USDTe,ETH])));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},ChainId.AVALANCHE,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.AVALANCHE,[].concat(_toConsumableArray(WETH_ONLY[ChainId.AVALANCHE]),[DAIe,BUSDe,USDTe])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.AVALANCHE,[].concat(_toConsumableArray(WETH_ONLY[ChainId.AVALANCHE]),[DAIe,BUSDe,USDTe])));export var PINNED_PAIRS=_defineProperty({},ChainId.AVALANCHE,[[new Token(ChainId.AVALANCHE,'0x5ce9680bddc91d955a51b959f5cabaf466b0be5a',18,'SOLAR','Moonwalkerswap Token'),new Token(ChainId.AVALANCHE,'0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',18,'WAVAX','Wrapped AVAX')],[BUSDe,USDTe],[DAIe,USDTe]]);export var SUPPORTED_WALLETS={INJECTED:{connector:injected,name:'Injected',iconName:'arrow-right.svg',description:'Injected web3 provider.',href:null,color:'#010101',primary:true},METAMASK:{connector:injected,name:'MetaMask',iconName:'metamask.png',description:'Easy-to-use browser extension.',href:null,color:'#E8831D'},WALLET_CONNECT:{connector:walletconnect,name:'WalletConnect',iconName:'walletConnectIcon.svg',description:'Connect to Trust Wallet, Rainbow Wallet and more...',href:null,color:'#4196FC',mobile:true},WALLET_LINK:{connector:walletlink,name:'Coinbase Wallet',iconName:'coinbaseWalletIcon.svg',description:'Use Coinbase Wallet app on mobile device',href:null,color:'#315CF5'}};export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=50;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;export var BIG_INT_ZERO=JSBI.BigInt(0);// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var ONE_BIPS_FRACTION=new Fraction(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH\nexport var BETTER_TRADE_LINK_THRESHOLD=new Percent(JSBI.BigInt(75),JSBI.BigInt(10000));// the Moonwalkerswap Default token list lives here\nexport var DEFAULT_TOKEN_LIST_URL=\"'https://unpkg.com/moonwalkerswap-default-token-lists@1.0.6/src/tokens/avalanche.json'\";","map":{"version":3,"sources":["/Users/warrenmason/Downloads/Final Versions/Avalanche/BSC-Moonwalker-Swap-main/src/constants/index.ts"],"names":["ChainId","Fraction","JSBI","Percent","Token","WETH","injected","walletconnect","walletlink","ROUTER_ADDRESS","ZERO_ADDRESS","DAIe","AVALANCHE","BUSDe","USDTe","USDC","ETH","WETH_ONLY","SOLAR_ADDRESS","SOLAR","MERKLE_DISTRIBUTOR_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","SUPPORTED_WALLETS","INJECTED","connector","name","iconName","description","href","color","primary","METAMASK","WALLET_CONNECT","mobile","WALLET_LINK","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","ONE_BIPS_FRACTION","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate","BETTER_TRADE_LINK_THRESHOLD","DEFAULT_TOKEN_LIST_URL"],"mappings":"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","sourcesContent":["import { ChainId, Fraction, JSBI, Percent, Token, WETH } from 'moonwalkerswap-avalanche-sdk'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nimport { injected, walletconnect, walletlink } from '../connectors'\n\nexport const ROUTER_ADDRESS = '0xde8922465457beaebbe7e9dc35c6ae56650be685'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const DAIe = new Token(ChainId.AVALANCHE, '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3', 18, 'DAI', 'Dai Stablecoin')\nexport const BUSDe = new Token(ChainId.AVALANCHE, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD')\nexport const USDTe = new Token(ChainId.AVALANCHE, '0x55d398326f99059ff775485246999027b3197955', 18, 'USDT', 'Tether USD')\nexport const USDC = new Token(ChainId.AVALANCHE, '0x55d398326f99059ff775485246999027b3197955', 18, 'USDT', 'Tether USD')\nexport const ETH = new Token(\n  ChainId.AVALANCHE,\n  '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  18,\n  'ETH',\n  'Binance-Peg Ethereum Token'\n)\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.AVALANCHE]: [WETH[ChainId.AVALANCHE]],\n}\n\n\n// export const GOVERNANCE_ADDRESS = '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n\nconst SOLAR_ADDRESS = '0x5ce9680bddc91d955a51b959f5cabaf466b0be5a'\nexport const SOLAR: { [chainId in ChainId]: Token } = {\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SOLAR_ADDRESS, 18, 'SLR', 'Solar Moonwalkerswap'),\n}\n\n// TODO: specify merkle distributor for mainnet\nexport const MERKLE_DISTRIBUTOR_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.AVALANCHE]: '0x5751b2880d7fe4b1c9e7845ea58221456530afe7',\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.AVALANCHE]: [...WETH_ONLY[ChainId.AVALANCHE], DAIe, BUSDe, USDTe, ETH],\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.AVALANCHE]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.AVALANCHE]: [...WETH_ONLY[ChainId.AVALANCHE], DAIe, BUSDe, USDTe],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.AVALANCHE]: [...WETH_ONLY[ChainId.AVALANCHE], DAIe, BUSDe, USDTe],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.AVALANCHE]: [\n    [\n      new Token(ChainId.AVALANCHE, '0x5ce9680bddc91d955a51b959f5cabaf466b0be5a', 18, 'SOLAR', 'Moonwalkerswap Token'),\n      new Token(ChainId.AVALANCHE, '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n    ],\n    [BUSDe, USDTe],\n    [DAIe, USDTe],\n  ],\n}\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  iconName: string\n  description: string\n  href: string | null\n  color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true\n}\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  INJECTED: {\n    connector: injected,\n    name: 'Injected',\n    iconName: 'arrow-right.svg',\n    description: 'Injected web3 provider.',\n    href: null,\n    color: '#010101',\n    primary: true,\n  },\n  METAMASK: {\n    connector: injected,\n    name: 'MetaMask',\n    iconName: 'metamask.png',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    color: '#E8831D',\n  },\n  WALLET_CONNECT: {\n    connector: walletconnect,\n    name: 'WalletConnect',\n    iconName: 'walletConnectIcon.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    href: null,\n    color: '#4196FC',\n    mobile: true\n  },\n  WALLET_LINK: {\n    connector: walletlink,\n    name: 'Coinbase Wallet',\n    iconName: 'coinbaseWalletIcon.svg',\n    description: 'Use Coinbase Wallet app on mobile device',\n    href: null,\n    color: '#315CF5'\n  },\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const ONE_BIPS_FRACTION = new Fraction(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\nexport const BETTER_TRADE_LINK_THRESHOLD = new Percent(JSBI.BigInt(75), JSBI.BigInt(10000))\n\n// the Moonwalkerswap Default token list lives here\nexport const DEFAULT_TOKEN_LIST_URL = `'https://unpkg.com/moonwalkerswap-default-token-lists@1.0.6/src/tokens/avalanche.json'`\n"]},"metadata":{},"sourceType":"module"}